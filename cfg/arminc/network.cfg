// Max bytes/sec the host can receive data.
// Default: 196608
//
// >> Allows specifying game traffic bandwidth that online game servers are sent to the client during gameplay.
// <!> >> Lower bandwidth rate setting can help avoid packet loss if the Internet service provider or routers drop network packets.
// <!> >> Insufficient bandwidth rate can cause delayed network packets when the game server sends updates about players over the network to the client.
//
// <> Values:
// [MIN] 0.5 Mbps:  65536
//   |   1.0 Mbps: 131072
//   |   2.0 Mbps: 262144
//   |   3.0 Mbps: 393216
//   |   4.0 Mbps: 524288
//   |   5.0 Mbps: 655360
// [MAX] 6.0 Mbps: 786432
rate "786432"

// Max number of command packets sent to the server per second.
// Default: 64
//
// <i> If the server has a lower tick rate than the set value, the value will be automatically set to the server maximal value.
// <i> The number of packets sent, besides the set value, are also limited by the frame rate.
cl_cmdrate "128"

// Max number of packets per second of updates received from the server.
// Default: 64
//
// <i> If the server tick rate is lower than the set value, it will be automatically set to the server maximal value.
// <i> Also, it is bound to 'cl_cmdrate' via 'sv_client_cmdrate_difference 0'.
cl_updaterate "128"

// << NOT WORKING AS EXPECTED >>
// Set the interpolation amount (bounded on low side by server interp ratio settings).
// Default: 0.03125
//
// >> Lerp calculation = cl_interp_ratio / cl_updaterate
//
// <i> Value '0' will let the engine automatically calculate the correct lerp value.
//
// <> Common interpolation values calculated:
// Tickrate  64: cl_interp_ratio 2 / cl_updaterate 64  = lerp 31.250 -> ~31.3ms interpolation time
// Tickrate  64: cl_interp_ratio 1 / cl_updaterate 64  = lerp 15.625 -> ~15.6ms interpolation time
// Tickrate 128: cl_interp_ratio 2 / cl_updaterate 128 = lerp 15.625 -> ~15.6ms interpolation time
// Tickrate 128: cl_interp_ratio 1 / cl_updaterate 128 = lerp  7.813 -> ~ 7.8ms interpolation time
//
// ** The command is not working as expected:
// <!> While lerp is correctly, 'cl_interp' does not return the value that it should be automatically set to and instead returns its lowest value.
// <!> Does not set the correct value if 'cl_interp_ratio >1'.
// <!> The value is forced down from its default state of '0.03125' to '0.031'.
cl_interp "0.015625"

// Sets the interpolation amount (final amount is cl_interp_ratio / cl_updaterate).
// Default: 2
//
// <> Values:
// 1: For a stable connection (almost no packet loss).
// 2: When experiencing a light loss or choke (light packet loss).
// 3: When experiencing a heavy loss or choke (high packet loss).
//
// <i> The value '1' reduces entity interpolation times to a minimum. Recommended mostly for LAN and high-end  .
// <i> The value '2' interpolate over 2 snapshots to avoid issues where one snapshot is dropped once in a while. Safest option for most users.
// <i> The value '3' protects more against packet loss, increase further for more protection. For users with an unstable connection.
//
// <!> Values from '1' to '2' are enforced by almost all servers via the command 'sv_competitive_minspec 1'.
cl_interp_ratio "1"

// Interpolation on listen servers or during demo playback.
// Default: 1
cl_interpolate "1"

// Perform client side prediction.
// Default: 1
cl_predict "1"

// Perform client side prediction of weapon effects.
// Default: 1
cl_predictweapons "1"

// Perform server side lag compensation of weapon firing events.
// Default: 1
cl_lagcompensation "1"

// Makes the client to select a relay and communicate through that relay.
// Default: 0
//
// <> Values:
//  0: Use the connect method requested by GC.
// >0: Always use SDR if possible.
// <0: Always use direct UDP if possible
net_client_steamdatagram_enable_override "1"

// Allow steam connections to use relay servers as a fallback.
// Default: 1
net_steamcnx_allowrelay "1"

// Use steam connections on listen server as a fallback.
// Default: 1
//
// <i> Value '2' force the use of the Steam relay server connections instead of raw UDP.
net_steamcnx_enabled "2"

// Number of fragments for a splitpacket that can be sent per frame.
// Default: 1
//
// <i> Value '>1' is splitting multiple packets per frame.
// <i> A higher value reduces choke but is more CPU intensive.
// <i> For bad CPUs that cannot handle the extra load is recommended to use the default value.
net_splitrate "1"

// Requested max packet size before packets are split.
// Default: 1200
//
// <-> Data packets are not sent with every single change made, rather via snapshots (usually 20 per seconds) which contain all change since the last update.
// So, this limits how many bytes the server may send to the client which prevents packages getting in any buffer.
// <i> Use max allowable (default value) packet size to avoid split packets more to save CPU time and packet overhead.
//
// <!> If network 'Loss' occurs, lower the value:
// > Value '1100' balance between reliability and avoiding split packets.
// > Value '900' is a reliable packet size for routers that have trouble with larger sizes.
//
// <i> Use the command 'net_showsplits 1' to see packets logged in console.
net_maxroutable "1200"

// Quality of Service timeout (no response) in seconds.
// Default: 15
mm_session_search_qos_timeout "20"

// Longest preferred ping to dedicated servers for games.
// Default: 150
//
// >> Allows specifying max acceptable matchmaking ping when searching for a game on official matchmaking servers.
// <i> >> If there are official servers satisfying the ping setting, the matchmaking will always connect in a match hosted on those servers.
// <i> >> If there are no official servers near, the matchmaking will connect in a match hosted on the next nearest official server with a higher ping.
mm_dedicated_search_maxping "50"

// When performing CS:GO community matchmaking look for servers with at least so many human players.
// Default: 3
mm_csgo_community_search_players_min "3"

// Delay in seconds before the client will resend the 'connect' attempt.
// Default: 2
//
// <!> Works only before joining a server.
cl_resend "1.5"

// Total time allowed for the client to resend the 'connect' attempt.
// Default: 60
cl_resend_timeout "20"

// Delay in seconds without receiving a packet from the server before the client will disconnect itself.
// Default: 30
cl_timeout "30"

// Determines which files can be downloaded from the server.
// Default: all
//
// <> Values:
// all:      Allows all server resources to download.
// nosounds: Allows all server resources to download, except sounds (ex. '.mp3', '.wav' etc.).
// none:     Blocks all server resources to download.
cl_downloadfilter "all"

// Lobby default permissions.
// Default: 1
//
// <> Values:
// 0: Private
// 1: Public
lobby_default_privacy_bits2 "0"

// Users automatically advertise for invites.
// Default: 1
//
// <> Values:
// 0: Disabled
// 1: Last
// 2: Auto
ui_setting_advertiseforhire_auto "1"

// Advertise joinable game in progress to Steam friends, otherwise need a Steam invite.
// Default: 1
//
// <> Values:
// 0: None - Friends can join the game only when they get an invite.
// 1: Official servers - Friends can join the game only on official servers.
// 2: All servers - Friends can join the game on official and community servers.
cl_join_advertise "2"

// Ignore in-game invites from recent teammates or other non-friends.
// Default: 0
cl_invites_only_friends "0"

// Ignore all invites when user is playing a match.
// Default: 0
cl_invites_only_mainmenu "0"
